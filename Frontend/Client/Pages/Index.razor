@page "/"
@page "/index"
@using Frontend.Client.Services
@using Frontend.Client.DTO;
@inject DataService DataService
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Hello, Manuel!</h1>

<h3>Users</h3>

<div class="mb-3">
    <button class="btn btn-danger" @onclick="BlockSelectedUsers">Bloquear</button>
    <button class="btn btn-success" @onclick="UnblockSelectedUsers">Desbloquear</button>
    <button class="btn btn-warning" @onclick="DeleteSelectedUsers">Eliminar</button>
</div>

@if (users == null)
{
    <p><em>Cargando...</em></p>
}
else if (!users.Any())
{
    <p>No se encontraron usuarios.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><input type="checkbox" @onclick="SelectAllUsers" /></th>
                <th>Nombre</th>
                <th>Email</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td><input type="checkbox" @bind="user.IsSelected" /></td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDTO> users;

    protected override async Task OnInitializedAsync()
    {
        if (!await DataService.IsUserAuthenticatedAndNotBlockedAsync())
        {
            NavigationManager.NavigateTo("/login");
        }

        users = await DataService.GetAllUsersAsync();
    }

    private void SelectAllUsers()
    {
        bool selectAll = !users.All(u => u.IsSelected);
        foreach (var user in users)
        {
            user.IsSelected = selectAll;
        }
    }

    private async Task BlockSelectedUsers()
    {
        var selectedUserIds = users.Where(u => u.IsSelected).Select(u => u.Id).ToList();
        await DataService.UpdateUserStatusBlockedAsync(selectedUserIds);
        await RefreshUsers();
    }

    private async Task UnblockSelectedUsers()
    {
        var selectedUserIds = users.Where(u => u.IsSelected).Select(u => u.Id).ToList();
        await DataService.UpdateUserStatusUnBlockedAsync(selectedUserIds);
        await RefreshUsers();
    }

    private async Task DeleteSelectedUsers()
    {
        var selectedUserIds = users.Where(u => u.IsSelected).Select(u => u.Id).ToList();
        if (selectedUserIds.Any())
        {
            await DataService.DeleteUserAsync(selectedUserIds);
            users = await DataService.GetAllUsersAsync();
        }
        await RefreshUsers();
    }

    private async Task RefreshUsers()
    {
        users = await DataService.GetAllUsersAsync();
        StateHasChanged();
    }

}