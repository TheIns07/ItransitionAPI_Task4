
@page "/"
@using Frontend.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Frontend.Client.DTO;
@inject DataService DataService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<h3>Register </h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">Blocked User</div>
}

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="registerModel.Name" />
    </div>
    <div class="mb-3">
        <label for="registerEmail">Email</label>
        <InputText id="registerEmail" class="form-control" @bind-Value="registerModel.Email" />
    </div>
    <div class="mb-3">
        <label for="registerPassword">Password</label>
        <InputText id="registerPassword" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>




@code {
    private LoginModel loginModel = new LoginModel();
    private RegisterDTO registerModel = new RegisterDTO();

    private string registerErrorMessage;
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var token = await DataService.LoginAsync(loginModel.Email, loginModel.Password);
            var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            await authStateProvider.MarkUserAsAuthenticated(token);
            NavigationManager.NavigateTo("/main");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            await DataService.AddUserAsync(registerModel);
            registerErrorMessage = "Registration successful. You can now log in.";
            NavigationManager.NavigateTo("/main");
        }
        catch (Exception ex)
        {
            registerErrorMessage = ex.Message;
        }
    }


}
